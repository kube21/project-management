{"ast":null,"code":"var _jsxFileName = \"/home/mithun/Documents/project-tracking/client/src/redux/networkservice/networkService.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { Alert } from 'antd';\nexport const redirectToLogin = () => {\n  // clear the local storage\n  localStorage.clear(); // clear the local cookies\n\n  document.cookie.split(';').forEach(c => {\n    document.cookie = c.replace(/^ +/, '').replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`);\n  }); // redirect to the login screen\n\n  window.location.href = '/';\n};\nexport default {\n  setupInterceptors: () => {\n    // Add a response interceptor\n    axios.interceptors.response.use(response => {\n      if (response.data.error === 'Unauthorized' || response.status === 401) redirectToLogin();\n      return response;\n    }, error => {\n      let err = JSON.parse(JSON.stringify(error));\n\n      if (err.message === 'Network Error') {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Alert, {\n          message: \"Network Error\",\n          type: \"error\",\n          showIcon: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 15\n          }\n        }));\n      }\n\n      err = JSON.parse(JSON.stringify(error.response));\n      if (err.data.error === 'Unauthorized' || err.status === 401) redirectToLogin(); // eslint-disable-next-line prefer-promise-reject-errors\n\n      return Promise.reject('error');\n    });\n  }\n};","map":{"version":3,"sources":["/home/mithun/Documents/project-tracking/client/src/redux/networkservice/networkService.js"],"names":["React","axios","Alert","redirectToLogin","localStorage","clear","document","cookie","split","forEach","c","replace","Date","toUTCString","window","location","href","setupInterceptors","interceptors","response","use","data","error","status","err","JSON","parse","stringify","message","Promise","reject"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,MAAtB;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAM;AACnC;AACAC,EAAAA,YAAY,CAACC,KAAb,GAFmC,CAGnC;;AACAC,EAAAA,QAAQ,CAACC,MAAT,CAAgBC,KAAhB,CAAsB,GAAtB,EAA2BC,OAA3B,CAAmCC,CAAC,IAAI;AACtCJ,IAAAA,QAAQ,CAACC,MAAT,GAAkBG,CAAC,CAChBC,OADe,CACP,KADO,EACA,EADA,EAEfA,OAFe,CAEP,KAFO,EAEC,aAAY,IAAIC,IAAJ,GAAWC,WAAX,EAAyB,SAFtC,CAAlB;AAGD,GAJD,EAJmC,CASnC;;AACAC,EAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;AACD,CAXM;AAaP,eAAe;AACbC,EAAAA,iBAAiB,EAAE,MAAM;AACvB;AACAhB,IAAAA,KAAK,CAACiB,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CACED,QAAQ,IAAI;AACV,UAAIA,QAAQ,CAACE,IAAT,CAAcC,KAAd,KAAwB,cAAxB,IAA0CH,QAAQ,CAACI,MAAT,KAAoB,GAAlE,EAAuEpB,eAAe;AACtF,aAAOgB,QAAP;AACD,KAJH,EAKEG,KAAK,IAAI;AACP,UAAIE,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeL,KAAf,CAAX,CAAV;;AACA,UAAIE,GAAG,CAACI,OAAJ,KAAgB,eAApB,EAAqC;AACnC,4BACE,uDACE,oBAAC,KAAD;AAAO,UAAA,OAAO,EAAC,eAAf;AAA+B,UAAA,IAAI,EAAC,OAApC;AAA4C,UAAA,QAAQ,MAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF;AAKD;;AACDJ,MAAAA,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeL,KAAK,CAACH,QAArB,CAAX,CAAN;AACA,UAAIK,GAAG,CAACH,IAAJ,CAASC,KAAT,KAAmB,cAAnB,IAAqCE,GAAG,CAACD,MAAJ,KAAe,GAAxD,EAA6DpB,eAAe,GAVrE,CAWP;;AACA,aAAO0B,OAAO,CAACC,MAAR,CAAe,OAAf,CAAP;AACD,KAlBH;AAoBD;AAvBY,CAAf","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { Alert } from 'antd';\n\nexport const redirectToLogin = () => {\n  // clear the local storage\n  localStorage.clear();\n  // clear the local cookies\n  document.cookie.split(';').forEach(c => {\n    document.cookie = c\n      .replace(/^ +/, '')\n      .replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`);\n  });\n  // redirect to the login screen\n  window.location.href = '/';\n};\n\nexport default {\n  setupInterceptors: () => {\n    // Add a response interceptor\n    axios.interceptors.response.use(\n      response => {\n        if (response.data.error === 'Unauthorized' || response.status === 401) redirectToLogin();\n        return response;\n      },\n      error => {\n        let err = JSON.parse(JSON.stringify(error));\n        if (err.message === 'Network Error') {\n          return (\n            <>\n              <Alert message=\"Network Error\" type=\"error\" showIcon />\n            </>\n          );\n        }\n        err = JSON.parse(JSON.stringify(error.response));\n        if (err.data.error === 'Unauthorized' || err.status === 401) redirectToLogin();\n        // eslint-disable-next-line prefer-promise-reject-errors\n        return Promise.reject('error');\n      }\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}